------------------
-------Cap1 ------
------------------
It is possible to compile this program like:
    gcc -o program main.c calculadora.c salida.c 

But this way is not optimized because it will take time to recompile everything, althoug it has been
only a little change. The proper way to do it is to generate the object file or .o file to maintein it if the 
c code that generates it has not been changed so it is not necessary to recompile it.

------------------
-------Cap2 ------
------------------
There are phony rules than let us execute things without create them. clean for example.
You can write the make target you want. if you dont specify the target it will execute the first rule in the Makefile.
If a rule has as dependencies other rules, it will be executed before.

------------------
-------Cap3 ------
------------------
It is possible to define variables which usually are in capital letters.
Theare two types: simple and recursive.
Simple: just store the information in the first place.
Recursive: it can change its value during the make execution and it is evaluated the moment it is needed. It can be redefined.

Make writes by the standard exit the command executed. In order to avoid that @ before the command

------------------
-------Cap4 ------
------------------
There are some unspoken rules in make that free you to write everything. This rules can help with c, c++, fortran, pascal
an much more.

------------------
-------Cap5 ------
------------------
Make recompiles the files when the date of modification of the code is later than the object files. That way 
only recompiles the files depending on the date of modification and for that reason is really more efective and faster.

-------------------------------------
-------Cap6 Automatic variables -----
-------------------------------------
Patterns: permits us to use with more flexibility some rules that we have defined.
Thanks to the % simbol (works as * in linux) subtitues every word in that simbol. So %.o will take every .o file in the path.
folder1/%.c means that can take every .o file inside folder1. 
In order to controls the flow of this Patterns there are automatic variables (see doc of gnu make), some important variables are:

$< First of the dependencies
$? every dependencies
$@ the name of the rule

-------------------------------------
-------Cap7 Multiple files and rows--
-------------------------------------
With the include directive it is possible to call another file/s. 
include src/Makefile windows/Makefile.windows

For Spliting a long row in multiple ones \ and that's all.

OBJ = main.o salid.o calculadora.o disco.o red.o \
usb.o hardware.o


-------------------------------------
----- Cap8 General understanding ----
-------------------------------------

--- PHONY TARGETS
By default, Makefile targets are "file targets" - they are used to build files from other files. 
Make assumes its target is a file, and this makes writing Makefiles relatively easy.
However, sometimes you want your Makefile to run commands that do not represent physical files 
in the file system. Good examples for this are the common targets "clean" and "all". 
Chances are this isn't the case, but you may potentially have a file named clean in your main directory. 
In such a case Make will be confused because by default the clean target would be associated with this file 
and Make will only run it when the file doesn't appear to be up-to-date with regards to its dependencies.

These special targets are called phony and you can explicitly tell Make they're not associated with files, e.g.:
.PHONY: clean
clean:
  rm -rf *.o

Some common make targets that are often phony are: all, install, clean, distclean, TAGS, info, check.

--- Commly used symbols

VAR ?= value 
This will change the value of VAR to 'value' if it is not defined before. 


--- Commly used functions

$(wildcard pattern) : 
The result of wildcard is a space-separated list of the names of existing files that match the pattern

$(addsuffix suffix,names...) : 
The value of suffix is appended to the end of each individual name and the resulting larger names 
are concatenated with single spaces between them.

$(addprefix prefix,names...) :
The value of prefix is prepended to the front of each
individual name and the resulting larger names are concatenated with single
spaces between them.

$(patsubst pattern,replacement,text) :
Replace words matching pattern with replacement in text.