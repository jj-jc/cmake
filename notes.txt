------------------
-------Cap1 ------
------------------
It is possible to compile this program like:
    gcc -o program main.c calculadora.c salida.c 

But this way is not optimized because it will take time to recompile everything, althoug it has been
only a little change. The proper way to do it is to generate the object file or .o file to maintein it if the 
c code that generates it has not been changed so it is not necessary to recompile it.

------------------
-------Cap2 ------
------------------
There are phony rules than let us execute things without create them. clean for example.
You can write the make target you want. if you dont specify the target it will execute the first rule in the Makefile.
If a rule has as dependencies other rules, it will be executed before.

------------------
-------Cap3 ------
------------------
It is possible to define variables which usually are in capital letters.
Theare two types: simple and recursive.
Simple: just store the information in the first place.
Recursive: it can change its value during the make execution and it is evaluated the moment it is needed. It can be redefined.

Make writes by the standard exit the command executed. In order to avoid that @ before the command

------------------
-------Cap4 ------
------------------
There are some unspoken rules in make that free you to write everything. This rules can help with c, c++, fortran, pascal
an mucho more.

------------------
-------Cap5 ------
------------------
Make recompiles the files when the date of modification of the code is later than the object files. That way 
only recompiles the files depending on the date of modification and for that reason is really more efective and faster.